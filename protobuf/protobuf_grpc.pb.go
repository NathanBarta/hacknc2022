// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: protobuf.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeServiceClient is the client API for TradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeServiceClient interface {
	StreamTicker(ctx context.Context, opts ...grpc.CallOption) (TradeService_StreamTickerClient, error)
}

type tradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeServiceClient(cc grpc.ClientConnInterface) TradeServiceClient {
	return &tradeServiceClient{cc}
}

func (c *tradeServiceClient) StreamTicker(ctx context.Context, opts ...grpc.CallOption) (TradeService_StreamTickerClient, error) {
	stream, err := c.cc.NewStream(ctx, &TradeService_ServiceDesc.Streams[0], "/protobuf.TradeService/StreamTicker", opts...)
	if err != nil {
		return nil, err
	}
	x := &tradeServiceStreamTickerClient{stream}
	return x, nil
}

type TradeService_StreamTickerClient interface {
	Send(*Signal) error
	Recv() (*Ticker, error)
	grpc.ClientStream
}

type tradeServiceStreamTickerClient struct {
	grpc.ClientStream
}

func (x *tradeServiceStreamTickerClient) Send(m *Signal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tradeServiceStreamTickerClient) Recv() (*Ticker, error) {
	m := new(Ticker)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeServiceServer is the server API for TradeService service.
// All implementations must embed UnimplementedTradeServiceServer
// for forward compatibility
type TradeServiceServer interface {
	StreamTicker(TradeService_StreamTickerServer) error
	mustEmbedUnimplementedTradeServiceServer()
}

// UnimplementedTradeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTradeServiceServer struct {
}

func (UnimplementedTradeServiceServer) StreamTicker(TradeService_StreamTickerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTicker not implemented")
}
func (UnimplementedTradeServiceServer) mustEmbedUnimplementedTradeServiceServer() {}

// UnsafeTradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeServiceServer will
// result in compilation errors.
type UnsafeTradeServiceServer interface {
	mustEmbedUnimplementedTradeServiceServer()
}

func RegisterTradeServiceServer(s grpc.ServiceRegistrar, srv TradeServiceServer) {
	s.RegisterService(&TradeService_ServiceDesc, srv)
}

func _TradeService_StreamTicker_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TradeServiceServer).StreamTicker(&tradeServiceStreamTickerServer{stream})
}

type TradeService_StreamTickerServer interface {
	Send(*Ticker) error
	Recv() (*Signal, error)
	grpc.ServerStream
}

type tradeServiceStreamTickerServer struct {
	grpc.ServerStream
}

func (x *tradeServiceStreamTickerServer) Send(m *Ticker) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tradeServiceStreamTickerServer) Recv() (*Signal, error) {
	m := new(Signal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TradeService_ServiceDesc is the grpc.ServiceDesc for TradeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.TradeService",
	HandlerType: (*TradeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTicker",
			Handler:       _TradeService_StreamTicker_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf.proto",
}
